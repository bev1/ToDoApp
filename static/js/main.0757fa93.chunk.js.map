{"version":3,"sources":["components/SearchArea.js","components/MenuItem.js","components/SideBar.js","components/ListItem.js","components/Main.js","components/SearchAreaMobile.js","components/SlideMenu.js","containers/App.js","actions/toDoList.js","actions/FolderName.js","actions/chooseFolder.js","actions/deleteFolder.js","actions/addListItem.js","actions/editItem.js","actions/checkItem.js","actions/renameFolder.js","actions/newFolderName.js","actions/getSearchValue.js","serviceWorker.js","reducers/toDoList.js","reducers/searchTerm.js","reducers/folderName.js","reducers/chooseFolder.js","reducers/newFolderName.js","store.js","index.js","assets/nav_background.jpg"],"names":["useStyles","makeStyles","searchInput","margin","background","borderRadius","marginRight","searchForm","textAlign","searchButton","padding","sortSelect","minWidth","marginBottom","Transition","React","forwardRef","props","ref","Slide","direction","SearchArea","classes","useState","open","setOpen","handleClose","Grid","container","justify","item","xs","className","onSubmit","e","preventDefault","TextField","required","id","label","variant","onChange","getSearchValue","searchTerm","length","Button","color","onClick","index","folders","map","val","chooseFolder","indexOf","Divider","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogActions","button","display","width","textTransform","fontSize","fontFamily","buttonActive","backgroundColor","icon","marginLeft","transform","MenuItem","menuItem","activeFolder","activeFolderId","folder","sideBar","border","borderTopLeftRadius","borderBottomLeftRadius","overflow","SideBar","i","key","DialogContent","autoFocus","fullWidth","newFolderName","folderName","toDoList","listItem","borderBottom","check","marginTop","grid","ListItem","itemId","spacing","sm","Checkbox","checked","checkItem","folderId","type","value","onSave","editItem","editButtonContent","buttonsAlign","editOnViewClick","buttonRename","lineHeight","buttonDelete","title","header","bg","backgroundSize","btton","addNew","css","borderTopRightRadius","Main","currentFolder","undefined","Typography","noWrap","deleteFolder","checkList","list","addListItem","getFolderName","updateFolderName","renameFolder","SearchAreaMobile","App","styles","menuSlide","burgerButtonClassName","menuMobile","isOpen","SlideMenu","this","Container","maxWidth","Hidden","smDown","md","Component","bmBurgerButton","position","height","right","top","bmBurgerBars","bmBurgerBarsHover","bmCrossButton","bmCross","bmMenuWrap","bmMenu","bmMorphShape","fill","bmItemList","bmItem","bmOverlay","connect","state","dispatch","newItem","name","target","newName","toLowerCase","Boolean","window","location","hostname","match","ToDoList","action","filter","newList","push","updatedList","checkedList","renamedFoldersList","SearchTerm","FolderName","createStore","combineReducers","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.0757fa93.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst useStyles = makeStyles({\r\n  searchInput: {\r\n    margin: '0',\r\n    background: 'white',\r\n    borderRadius: '4px',\r\n    marginRight: '10px',\r\n  },\r\n  searchForm: {\r\n    textAlign: 'center',\r\n    margin: '10px 0 10px',\r\n  },\r\n  searchButton: {\r\n      padding: '8px',\r\n  },\r\n  sortSelect: {\r\n    minWidth: '120px',\r\n    marginBottom: '20px',\r\n  }\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst SearchArea = (props) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  function handleSubmit() {\r\n    const index = props.folders.map(val => val[0])\r\n    props.chooseFolder(index.indexOf(props.searchTerm, 0))\r\n  }\r\n\r\n    return(\r\n      <div>\r\n        <Grid container\r\n          justify=\"center\">\r\n          <Grid item xs={12}>\r\n            <form className={classes.searchForm} onSubmit={(e) => e.preventDefault()}>\r\n              <TextField\r\n                required={true}\r\n                className={classes.searchInput}\r\n                id=\"outlined-dense\"\r\n                label=\"Search\"\r\n                margin=\"dense\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => props.getSearchValue(e)}/>\r\n              {props.searchTerm.length > 0 ?\r\n              <Button variant=\"contained\" color=\"primary\" className={classes.searchButton} onClick={handleSubmit}>\r\n                Search\r\n              </Button> :\r\n              <Button variant=\"contained\" color=\"primary\" className={classes.searchButton} onClick={handleClickOpen}>\r\n                Search\r\n              </Button>}\r\n            </form>\r\n            <Divider />\r\n          </Grid>\r\n        </Grid>\r\n        <Dialog\r\n          open={open}\r\n          TransitionComponent={Transition}\r\n          keepMounted\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-slide-title\"\r\n          aria-describedby=\"alert-dialog-slide-description\"\r\n          >\r\n          <DialogTitle id=\"alert-dialog-slide-title\">{\"Please, enter search value\"}</DialogTitle>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Ok\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default SearchArea","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        display: 'block',\r\n        width: '100%',\r\n        textAlign: 'left',\r\n        textTransform: 'none',\r\n        fontSize: \"25px\",\r\n        fontFamily: 'Acme',\r\n    },\r\n    buttonActive: {\r\n        display: 'block',\r\n        width: '100%',\r\n        textAlign: 'left',\r\n        textTransform: 'none',\r\n        fontSize: \"25px\",\r\n        backgroundColor: 'rgba(63, 81, 181, 0.2)',\r\n        fontFamily: 'Acme',\r\n    },\r\n    icon: {\r\n        display: 'inline-block',\r\n        marginLeft: '10px',\r\n        transform: 'translateY(-3px)',\r\n        '&:first-letter': {\r\n            textTransform: 'uppercase'\r\n        }\r\n    }\r\n})\r\n\r\nconst MenuItem = (props) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.menuItem}>\r\n            {\r\n                props.activeFolder.activeFolderId === props.id ?\r\n                <Button color=\"primary\" className={classes.buttonActive} onClick={() => props.chooseFolder(props.id)} >\r\n                <FormatListBulletedIcon /><span className={classes.icon}>{props.folder}</span>\r\n                </Button> :            \r\n                <Button color=\"primary\" className={classes.button} onClick={() => props.chooseFolder(props.id)} >\r\n                <FormatListBulletedIcon /><span className={classes.icon}>{props.folder}</span>\r\n                </Button>\r\n            }\r\n            <Divider />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuItem;","import React from 'react';\r\nimport SearchArea from './SearchArea';\r\nimport MenuItem from './MenuItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\nconst useStyles = makeStyles({\r\n    sideBar: {\r\n        border: '1px solid rgba(63, 81, 181, 0.2)',\r\n        borderTopLeftRadius: '20px',\r\n        borderBottomLeftRadius: '20px',\r\n        overflow: 'hidden',\r\n    },\r\n    button: {\r\n        display: 'block',\r\n        textTransform: 'none',\r\n        fontSize: \"20px\",\r\n        width: '100%',\r\n        textAlign: 'left',\r\n    }\r\n})\r\n\r\nconst SideBar = (props) => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n  \r\n    function handleClickOpen() {\r\n      setOpen(true);\r\n    }\r\n    function handleClose(e) {\r\n      setOpen(false);\r\n    }\r\n    function handleCloseDone() {\r\n      setOpen(false);\r\n      props.toDoList(props.folderName)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.sideBar}>\r\n            <SearchArea searchTerm={props.searchTerm} folders={props.folders} chooseFolder={props.chooseFolder} getSearchValue={props.getSearchValue} />\r\n            {\r\n                props.folders.map((folder, i) => {\r\n                    return (\r\n                        <MenuItem key={i} folder={folder[0]} chooseFolder={props.chooseFolder} id={i} activeFolder={props.activeFolder} />\r\n                    )\r\n                })\r\n            }\r\n            <Button color=\"secondary\" className={classes.button} onClick={handleClickOpen}>\r\n            <AddIcon/> Add new\r\n            </Button>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Please, enter list name</DialogTitle>\r\n                <DialogContent>\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    id=\"name\"\r\n                    fullWidth\r\n                    onChange={(e)=>props.newFolderName(e)}\r\n                />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    Cancel\r\n                </Button>\r\n                {props.folderName.length > 1 ?\r\n                <Button onClick={handleCloseDone} color=\"primary\">\r\n                    Done\r\n                </Button> :\r\n                <Button color=\"primary\">\r\n                    Done\r\n                </Button>}\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideBar;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EdiText from 'react-editext';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles({\r\n    listItem: {\r\n        borderBottom: '1px solid rgba(63, 81, 181, 0.1)'\r\n    },\r\n    check: {\r\n        marginTop: '-3px',\r\n        marginRight: '10px'\r\n    },\r\n    grid: {\r\n        margin: '10px 0'\r\n    }\r\n})\r\n\r\nconst ListItem = (props) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.listItem}>            \r\n        {props.itemId !== 0 ? <div>\r\n          <Grid container spacing={0} className={classes.grid}>              \r\n            <Grid item xs={2} sm={1}>\r\n                <Checkbox\r\n                checked={props.listItem[1]}\r\n                className={classes.check}\r\n                color=\"primary\"\r\n                onChange={(e)=>props.checkItem(e, props.itemId, props.folderId)}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={10} sm={11}>\r\n                <EdiText\r\n                type=\"text\"\r\n                value={props.listItem[0]}\r\n                onSave={(val)=>props.editItem(val, props.itemId, props.folderId)}\r\n                editButtonContent=\"Edit\"\r\n                buttonsAlign='before'\r\n                editOnViewClick={true}\r\n                />\r\n            </Grid>\r\n          </Grid></div> : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport bg from '../assets/nav_background.jpg';\r\nimport ListItem from './ListItem';\r\nimport { css } from 'glamor';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst useStyles = makeStyles({\r\n    buttonRename: {\r\n        fontSize: \"15px\",\r\n        padding: '5px',\r\n        marginRight: '10px',\r\n        lineHeight: '1',\r\n        textTransform: 'none',\r\n    },\r\n    buttonDelete: {\r\n        fontSize: \"15px\",\r\n        padding: '5px',\r\n        lineHeight: '1',\r\n        textTransform: 'none',\r\n    },\r\n    title: {\r\n        fontFamily: 'Acme',\r\n        color: 'white',\r\n        '&:first-letter': {\r\n            textTransform: 'uppercase'}\r\n    },\r\n    header: {\r\n        background: `url(${bg})`,\r\n        backgroundSize: 'cover',\r\n        padding: '20px 10px 10px 20px'\r\n    },\r\n    btton: {\r\n        textTransform: 'none',\r\n        fontSize: \"20px\",\r\n    },\r\n    addNew: {\r\n        textAlign: 'right'\r\n    }\r\n})\r\n\r\nconst Main = (props) => {\r\n    const classes = useStyles();\r\n    const currentFolder = props.folders[props.activeFolder.activeFolderId]\r\n    \r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    function handleClickOpen() {\r\n        setOpen(true);\r\n    }\r\n    function handleClose() {\r\n        setOpen(false);\r\n    }\r\n    function handleCloseDone() {\r\n        setOpen(false);\r\n        props.renameFolder(props.activeFolder.activeFolderId, props.updateFolderName.newFolderName)\r\n    }\r\n    return (\r\n        <div className={`${sideBar}`}>\r\n            {props.folders.length > 0 && currentFolder !== undefined ? <div>\r\n            <div className={classes.header}>\r\n                <Typography noWrap className={classes.title} variant=\"h4\">\r\n                    {currentFolder[0]}\r\n                </Typography>\r\n                <Button variant=\"contained\" className={classes.buttonRename} onClick={handleClickOpen}>\r\n                    Rename\r\n                </Button>\r\n                <Button color=\"secondary\" variant=\"contained\" className={classes.buttonDelete} onClick={() => props.deleteFolder(props.activeFolder.activeFolderId)}>\r\n                    Delete\r\n                </Button>\r\n            </div>\r\n            <div className={classes.checkList}>\r\n            {\r\n                currentFolder.map((list, i) => {\r\n                    return (\r\n                        <ListItem key={i} listItem={list} itemId={i} editItem={props.editItem} folderId={props.activeFolder.activeFolderId} checkItem={props.checkItem} />\r\n                    )\r\n                })\r\n            }\r\n            <div className={classes.addNew}>\r\n                <Button color=\"secondary\" className={classes.button} onClick={() => props.addListItem(props.activeFolder.activeFolderId)}>\r\n                    <AddIcon/> Add new\r\n                </Button>\r\n            </div>\r\n                \r\n            </div></div> :\r\n            <div className={classes.header}>\r\n                <Typography noWrap className={classes.title} variant=\"h5\">\r\n                    Please, choose list\r\n                </Typography>\r\n            </div>}\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Rename your list</DialogTitle>\r\n                <DialogContent>\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    id=\"name\"\r\n                    fullWidth\r\n                    onChange={(e)=>props.getFolderName(e)}\r\n                />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    Cancel\r\n                </Button>\r\n                {props.updateFolderName.newFolderName.length > 1 ?\r\n                <Button onClick={handleCloseDone} color=\"primary\">\r\n                    Done\r\n                </Button> :\r\n                <Button color=\"primary\">\r\n                    Done\r\n                </Button>}\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nlet sideBar = css({\r\n    border: '1px solid rgba(63, 81, 181, 0.1)',\r\n    borderTopRightRadius: '20px',\r\n    overflow: 'hidden',\r\n    '@media(max-width: 992px)': {      \r\n        borderTopLeftRadius: '20px',\r\n    }\r\n  })\r\n\r\nexport default Main;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { css } from 'glamor';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n\r\nlet searchInput = css({\r\n  margin: '0',\r\n  background: 'white',\r\n  borderRadius: '4px',\r\n  marginRight: '10px',\r\n  '@media(max-width: 992px)': {\r\n    width: '55%',\r\n    marginLeft: '5px!important'\r\n  }\r\n})\r\n\r\nlet searchForm = css({\r\n  textAlign: 'center',\r\n  margin: '10px 0 10px',\r\n  '@media(max-width: 992px)': {\r\n    textAlign: 'left'\r\n  }\r\n})\r\n\r\nlet searchButton = css({\r\n  padding: '8px',\r\n  '@media(max-width: 992px)': {\r\n    marginLeft: '5px !important',\r\n    marginTop: '10px !important'\r\n  }\r\n})\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst SearchArea = (props) => {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  function handleSubmit() {\r\n    const index = props.folders.map(val => val[0])\r\n    props.chooseFolder(index.indexOf(props.searchTerm, 0))\r\n  }\r\n\r\n    return(\r\n      <div>\r\n        <Grid container\r\n          justify=\"center\">\r\n          <Grid item xs={12}>\r\n            <form className={`${searchForm}`} onSubmit={(e) => e.preventDefault()}>\r\n              <TextField\r\n                required={true}\r\n                className={`${searchInput}`}\r\n                id=\"outlined-dense\"\r\n                label=\"Search\"\r\n                margin=\"dense\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => props.getSearchValue(e)}/>\r\n              {props.searchTerm.length > 0 ?\r\n              <Button variant=\"contained\" color=\"primary\" className={`${searchButton}`} onClick={handleSubmit}>\r\n                Search\r\n              </Button> :\r\n              <Button variant=\"contained\" color=\"primary\" className={`${searchButton}`} onClick={handleClickOpen}>\r\n                Search\r\n              </Button>}\r\n            </form>\r\n            <Divider />\r\n          </Grid>\r\n        </Grid>\r\n        <Dialog\r\n          open={open}\r\n          TransitionComponent={Transition}\r\n          keepMounted\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-slide-title\"\r\n          aria-describedby=\"alert-dialog-slide-description\"\r\n          >\r\n          <DialogTitle id=\"alert-dialog-slide-title\">{\"Please, enter search value\"}</DialogTitle>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Ok\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default SearchArea","import React from 'react';\r\nimport SearchAreaMobile from './SearchAreaMobile';\r\nimport MenuItem from './MenuItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\nconst useStyles = makeStyles({\r\n    sideBar: {\r\n        border: '1px solid rgba(63, 81, 181, 0.2)',\r\n        borderTopLeftRadius: '20px',\r\n        borderBottomLeftRadius: '20px',\r\n        overflow: 'hidden',\r\n    },\r\n    button: {\r\n        display: 'block',\r\n        textTransform: 'none',\r\n        fontSize: \"20px\",\r\n        width: '100%',\r\n        textAlign: 'left',\r\n    }\r\n})\r\n\r\nconst SideBar = (props) => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n  \r\n    function handleClickOpen() {\r\n      setOpen(true);\r\n    }\r\n    function handleClose(e) {\r\n      setOpen(false);\r\n    }\r\n    function handleCloseDone() {\r\n      setOpen(false);\r\n      props.toDoList(props.folderName)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.sideBar}>\r\n            <SearchAreaMobile searchTerm={props.searchTerm} folders={props.folders} chooseFolder={props.chooseFolder} getSearchValue={props.getSearchValue} />\r\n            {\r\n                props.folders.map((folder, i) => {\r\n                    return (\r\n                        <MenuItem key={i} folder={folder[0]} chooseFolder={props.chooseFolder} id={i} activeFolder={props.activeFolder} />\r\n                    )\r\n                })\r\n            }\r\n            <Button color=\"secondary\" className={classes.button} onClick={handleClickOpen}>\r\n            <AddIcon/> Add new\r\n            </Button>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Please, enter list name</DialogTitle>\r\n                <DialogContent>\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    id=\"name\"\r\n                    fullWidth\r\n                    onChange={(e)=>props.newFolderName(e)}\r\n                />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    Cancel\r\n                </Button>\r\n                {props.folderName.length > 1 ?\r\n                <Button onClick={handleCloseDone} color=\"primary\">\r\n                    Done\r\n                </Button> :\r\n                <Button color=\"primary\">\r\n                    Done\r\n                </Button>}\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideBar;","import React from 'react';\nimport SideBar from '../components/SideBar';\nimport Main from '../components/Main';\nimport SlideMenu from '../components/SlideMenu'\nimport { css } from 'glamor';\nimport Hidden from '@material-ui/core/Hidden';\nimport { connect } from 'react-redux';\nimport { toDoList } from '../actions/toDoList';\nimport { folderName } from '../actions/FolderName';\nimport { chooseFolder } from '../actions/chooseFolder';\nimport { deleteFolder } from '../actions/deleteFolder';\nimport { addListItem } from '../actions/addListItem';\nimport { editItem } from '../actions/editItem';\nimport { checkItem } from '../actions/checkItem';\nimport { renameFolder } from '../actions/renameFolder';\nimport { newFolderName } from '../actions/newFolderName';\nimport { getSearchValue } from '../actions/getSearchValue';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport { slide as MenuSlide } from 'react-burger-menu';\n\n\nclass App extends React.Component{\n\n  render() {\n    return (\n      <div className='App'>\n        <MenuSlide styles={menuSlide} burgerButtonClassName={`${menuMobile}`} isOpen={false} >\n          <SlideMenu activeFolder={this.props.activeFolder} chooseFolder={this.props.chooseFolder} folders={this.props.folders} searchTerm={this.props.searchTerm} toDoList={this.props.toDoList} folderName={this.props.folderName} newFolderName={this.props.newFolderName} getSearchValue={this.props.getSearchValue} />          \n        </MenuSlide>\n        <Container maxWidth=\"lg\">\n          <Grid container spacing={0}>\n            <Hidden smDown>\n              <Grid item md={4}>\n                <SideBar activeFolder={this.props.activeFolder} chooseFolder={this.props.chooseFolder} folders={this.props.folders} searchTerm={this.props.searchTerm} toDoList={this.props.toDoList} folderName={this.props.folderName} newFolderName={this.props.newFolderName} getSearchValue={this.props.getSearchValue} />\n              </Grid>\n            </Hidden>\n            <Grid item xs={12} md={8}>\n              <Main updateFolderName={this.props.updateFolderName} getFolderName={this.props.getFolderName} renameFolder={this.props.renameFolder} checkItem={this.props.checkItem} editItem={this.props.editItem} addListItem={this.props.addListItem} deleteFolder={this.props.deleteFolder} folders={this.props.folders} activeFolder={this.props.activeFolder} />\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return{\n    folders: state.toDoList.list,\n    searchTerm: state.searchTerm.searchTerm,\n    folderName: state.folderName.folderName,\n    activeFolder: state.chooseFolder,\n    updateFolderName: state.newFolderName,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return{\n    toDoList: (newItem => {\n      dispatch(toDoList(newItem))\n    }),\n    newFolderName: (e => {\n      dispatch(folderName(e.target.value))\n    }),\n    chooseFolder: (folderId => {\n      dispatch(chooseFolder(folderId))\n    }),\n    deleteFolder: (folderId => {\n      dispatch(deleteFolder(folderId))\n    }),\n    addListItem: (id => {\n      dispatch(addListItem(id))\n    }),\n    editItem: ((val, itemId, folderId) => {\n      dispatch(editItem(val, itemId, folderId))\n    }),\n    checkItem: ((e, itemId, folderId) => {\n      dispatch(checkItem(e.target.checked, itemId, folderId))\n    }),\n    renameFolder: ((id, value) => {\n      dispatch(renameFolder(id, value))\n    }),\n    getFolderName: (e => {\n      dispatch(newFolderName(e.target.value))\n    }),\n    getSearchValue: (e => {\n      dispatch(getSearchValue(e.target.value.toLowerCase()))\n    })\n  }\n}\n\nlet menuMobile = css({\n  '@media(min-width: 992px)': {\n    display: 'none'\n  }\n})\n\nconst menuSlide = {\n  bmBurgerButton: {\n    position: 'fixed',\n    width: '30px',\n    height: '25px',\n    right: '35px',\n    top: '25px'\n  },\n  bmBurgerBars: {\n    background: 'white'\n  },\n  bmBurgerBarsHover: {\n    background: '#a90000'\n  },\n  bmCrossButton: {\n    height: '24px',\n    width: '24px'\n  },\n  bmCross: {\n    background: '#bdc3c7'\n  },\n  bmMenuWrap: {\n    position: 'fixed',\n    height: '100%'\n  },\n  bmMenu: {\n    background: 'white',\n    fontSize: '1.15em'\n  },\n  bmMorphShape: {\n    fill: '#373a47'\n  },\n  bmItemList: {\n    color: '#b8b7ad',\n  },\n  bmItem: {\n    display: 'inline-block'\n  },\n  bmOverlay: {\n    background: 'rgba(0, 0, 0, 0.3)'\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps) (App);","export function toDoList (newItem) {\r\n    return {\r\n        type: 'ADD_FOLDER',\r\n        newItem: newItem\r\n    }\r\n}","export function folderName (name) {\r\n    return {\r\n        type: 'FOLDER',\r\n        name: name\r\n    }\r\n}","export function chooseFolder (id) {\r\n    return {\r\n        type: 'CHOOSE_FOLDER',\r\n        id: id\r\n    }\r\n}","export function deleteFolder (id) {\r\n    return {\r\n        type: 'DELETE_FOLDER',\r\n        id: id\r\n    }\r\n}","export function addListItem (id) {\r\n    return {\r\n        type: 'ADD_LIST_ITEM',\r\n        id: id\r\n    }\r\n}","export function editItem (value, itemId, folderId) {\r\n    return {\r\n        type: 'EDIT_ITEM',\r\n        itemId: itemId,\r\n        folderId: folderId,\r\n        value: value\r\n    }\r\n}","export function checkItem (checked, itemId, folderId) {\r\n    return {\r\n        type: 'CHECK_ITEM',\r\n        itemId: itemId,\r\n        folderId: folderId,\r\n        checked: checked\r\n    }\r\n}","export function renameFolder (id, newName) {\r\n    return {\r\n        type: 'RENAME_FOLDER',\r\n        id: id,\r\n        newName: newName\r\n    }\r\n}","export function newFolderName (value) {\r\n    return {\r\n        type: 'NEW_FOLDER_NAME',\r\n        value: value\r\n    }\r\n}","export function getSearchValue (value) {\r\n    return {\r\n        type: 'GET_SEARCH_VALUE',\r\n        value: value\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const ToDoList = (\r\n    state = {\r\n        list: [\r\n            ['work',\r\n                ['Finish the monthly report', false],\r\n                ['Clean browser history from office PC', false],\r\n                ['Dont forget to congratulate the boss on his birthday', false]\r\n            ],\r\n            ['study',\r\n                ['React.js', false],\r\n                ['Node.js', false],\r\n                ['English', false]\r\n            ],\r\n            ['movies to watch',\r\n                ['Star Wars', false],\r\n                ['Fight Club', false],\r\n                ['Jurassic Park', false]\r\n            ]\r\n        ]\r\n    }, action) => {\r\n        switch (action.type) {\r\n            case 'ADD_FOLDER': return (\r\n                state = {\r\n                    ...state,\r\n                    list: [...state.list, [action.newItem]]\r\n            })\r\n            case 'DELETE_FOLDER': return (\r\n                state = {\r\n                    ...state,\r\n                    list: state.list.filter((item, i) => i !== action.id)\r\n            })\r\n            case 'ADD_LIST_ITEM':\r\n            const newItem = ['New list item', false]\r\n            const newList = [...state.list]\r\n            newList[action.id].push(newItem)\r\n            return (\r\n                state = {\r\n                    ...state,\r\n                    list: newList\r\n            })\r\n            case 'EDIT_ITEM':\r\n            const updatedList= [...state.list]\r\n            updatedList[action.folderId][action.itemId][0] = action.value\r\n            return (\r\n                state = {\r\n                    ...state,\r\n                    list: updatedList\r\n            })\r\n            case 'CHECK_ITEM':\r\n            const checkedList= [...state.list]\r\n            checkedList[action.folderId][action.itemId][1] = action.checked\r\n            return (\r\n                state = {\r\n                    ...state,\r\n                    list: checkedList\r\n            })\r\n            case 'RENAME_FOLDER':\r\n                const renamedFoldersList= [...state.list]\r\n                renamedFoldersList[action.id][0] = action.newName\r\n            return (\r\n                state = {\r\n                    ...state,\r\n                    list: renamedFoldersList\r\n            })\r\n            default:\r\n                return state;    \r\n        }\r\n    }\r\n\r\nexport default ToDoList;","const SearchTerm = (\r\n    state = {\r\n        searchTerm: '',\r\n    }, action) => {\r\n        switch (action.type) {\r\n            case 'GET_SEARCH_VALUE': return (\r\n                state = {\r\n                    ...state,\r\n                    searchTerm: action.value\r\n                })\r\n            default:\r\n                return state;    \r\n        }\r\n    }\r\n\r\nexport default SearchTerm;","const FolderName = (\r\n    state = {\r\n        folderName: '',\r\n    }, action) => {\r\n        switch (action.type) {\r\n            case 'FOLDER': return (\r\n                state = {\r\n                    ...state,\r\n                    folderName: action.name\r\n                })\r\n            default:\r\n                return state;    \r\n        }\r\n    }\r\n\r\nexport default FolderName;","const chooseFolder = (\r\n    state = {\r\n        activeFolderId: 0,\r\n    }, action) => {\r\n        switch (action.type) {\r\n            case 'CHOOSE_FOLDER': return (\r\n                state = {\r\n                    ...state,\r\n                    activeFolderId: action.id\r\n                })\r\n            default:\r\n                return state;    \r\n        }\r\n    }\r\n\r\nexport default chooseFolder;","const newFolderName = (\r\n    state = {\r\n        newFolderName: '',\r\n    }, action) => {\r\n        switch (action.type) {\r\n            case 'NEW_FOLDER_NAME': return (\r\n                state = {\r\n                    ...state,\r\n                    newFolderName: action.value\r\n                })\r\n            default:\r\n                return state;    \r\n        }\r\n    }\r\n\r\nexport default newFolderName;","import { createStore, combineReducers} from 'redux';\r\nimport toDoList from './reducers/toDoList';\r\nimport searchTerm from './reducers/searchTerm';\r\nimport folderName from './reducers/folderName';\r\nimport chooseFolder from './reducers/chooseFolder';\r\nimport newFolderName from './reducers/newFolderName';\r\n\r\nexport default createStore(\r\n    combineReducers({\r\n        toDoList,\r\n        searchTerm,\r\n        folderName,\r\n        chooseFolder,\r\n        newFolderName\r\n    })\r\n)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/nav_background.1555d7ef.jpg\";"],"sourceRoot":""}